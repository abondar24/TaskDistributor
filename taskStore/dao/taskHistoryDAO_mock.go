// Code generated by MockGen. DO NOT EDIT.
// Source: dao/taskHistoryDAO.go

// Package dao is a generated GoMock package.
package dao

import (
	sql "database/sql"
	reflect "reflect"

	data "github.com/abondar24/TaskDistributor/taskData/data"
	model "github.com/abondar24/TaskDistributor/taskStore/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskHistoryDao is a mock of TaskHistoryDao interface.
type MockTaskHistoryDao struct {
	ctrl     *gomock.Controller
	recorder *MockTaskHistoryDaoMockRecorder
}

// MockTaskHistoryDaoMockRecorder is the mock recorder for MockTaskHistoryDao.
type MockTaskHistoryDaoMockRecorder struct {
	mock *MockTaskHistoryDao
}

// NewMockTaskHistoryDao creates a new mock instance.
func NewMockTaskHistoryDao(ctrl *gomock.Controller) *MockTaskHistoryDao {
	mock := &MockTaskHistoryDao{ctrl: ctrl}
	mock.recorder = &MockTaskHistoryDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskHistoryDao) EXPECT() *MockTaskHistoryDaoMockRecorder {
	return m.recorder
}

// GetTaskById mocks base method.
func (m *MockTaskHistoryDao) GetTaskById(id *string, tx *sql.Tx) (*model.TaskHistoryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", id, tx)
	ret0, _ := ret[0].(*model.TaskHistoryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockTaskHistoryDaoMockRecorder) GetTaskById(id, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockTaskHistoryDao)(nil).GetTaskById), id, tx)
}

// GetTaskHistory mocks base method.
func (m *MockTaskHistoryDao) GetTaskHistory(id *string, tx *sql.Tx) (*[]*model.TaskHistoryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskHistory", id, tx)
	ret0, _ := ret[0].(*[]*model.TaskHistoryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskHistory indicates an expected call of GetTaskHistory.
func (mr *MockTaskHistoryDaoMockRecorder) GetTaskHistory(id, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskHistory", reflect.TypeOf((*MockTaskHistoryDao)(nil).GetTaskHistory), id, tx)
}

// GetTasksByStatus mocks base method.
func (m *MockTaskHistoryDao) GetTasksByStatus(status *data.TaskStatus, offset, limit *int, tx *sql.Tx) (*[]*model.TaskHistoryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByStatus", status, offset, limit, tx)
	ret0, _ := ret[0].(*[]*model.TaskHistoryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByStatus indicates an expected call of GetTasksByStatus.
func (mr *MockTaskHistoryDaoMockRecorder) GetTasksByStatus(status, offset, limit, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByStatus", reflect.TypeOf((*MockTaskHistoryDao)(nil).GetTasksByStatus), status, offset, limit, tx)
}

// SaveTaskEntry mocks base method.
func (m *MockTaskHistoryDao) SaveTaskEntry(entry *model.TaskHistoryDTO, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTaskEntry", entry, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTaskEntry indicates an expected call of SaveTaskEntry.
func (mr *MockTaskHistoryDaoMockRecorder) SaveTaskEntry(entry, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTaskEntry", reflect.TypeOf((*MockTaskHistoryDao)(nil).SaveTaskEntry), entry, tx)
}
