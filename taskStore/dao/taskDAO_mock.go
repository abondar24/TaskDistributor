// Code generated by MockGen. DO NOT EDIT.
// Source: dao/taskDAO.go

// Package dao is a generated GoMock package.
package dao

import (
	sql "database/sql"
	reflect "reflect"

	model "github.com/abondar24/TaskDistributor/taskStore/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskDao is a mock of TaskDao interface.
type MockTaskDao struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDaoMockRecorder
}

// MockTaskDaoMockRecorder is the mock recorder for MockTaskDao.
type MockTaskDaoMockRecorder struct {
	mock *MockTaskDao
}

// NewMockTaskDao creates a new mock instance.
func NewMockTaskDao(ctrl *gomock.Controller) *MockTaskDao {
	mock := &MockTaskDao{ctrl: ctrl}
	mock.recorder = &MockTaskDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskDao) EXPECT() *MockTaskDaoMockRecorder {
	return m.recorder
}

// GetTaskById mocks base method.
func (m *MockTaskDao) GetTaskById(id *string, tx *sql.Tx) (*model.TaskDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", id, tx)
	ret0, _ := ret[0].(*model.TaskDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockTaskDaoMockRecorder) GetTaskById(id, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockTaskDao)(nil).GetTaskById), id, tx)
}

// GetTasksByIds mocks base method.
func (m *MockTaskDao) GetTasksByIds(ids *[]string, tx *sql.Tx) (*[]*model.TaskDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByIds", ids, tx)
	ret0, _ := ret[0].(*[]*model.TaskDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByIds indicates an expected call of GetTasksByIds.
func (mr *MockTaskDaoMockRecorder) GetTasksByIds(ids, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByIds", reflect.TypeOf((*MockTaskDao)(nil).GetTasksByIds), ids, tx)
}

// SaveTask mocks base method.
func (m *MockTaskDao) SaveTask(task *model.TaskDTO, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTask", task, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTask indicates an expected call of SaveTask.
func (mr *MockTaskDaoMockRecorder) SaveTask(task, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTask", reflect.TypeOf((*MockTaskDao)(nil).SaveTask), task, tx)
}
